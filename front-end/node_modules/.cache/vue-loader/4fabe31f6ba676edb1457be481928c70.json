{"remainingRequest":"/home/colin/Workspace/src/platone-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/colin/Workspace/src/platone-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/colin/Workspace/src/platone-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/colin/Workspace/src/platone-frontend/src/components/page/Nodes.vue?vue&type=template&id=660340a1&scoped=true&","dependencies":[{"path":"/home/colin/Workspace/src/platone-frontend/src/components/page/Nodes.vue","mtime":1601001321776},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"div\",\n        {\n          staticStyle: { \"margin-bottom\": \"10px\" },\n          attrs: { slot: \"header\" },\n          slot: \"header\"\n        },\n        [\n          _c(\"span\", [_vm._v(_vm._s(_vm.$t(\"i18n.nodeList\")))]),\n          _vm.showEdit\n            ? _c(\n                \"el-button\",\n                {\n                  staticStyle: { float: \"right\", padding: \"3px 10px\" },\n                  attrs: { type: \"text\" },\n                  on: { click: _vm.openDialog2 }\n                },\n                [_vm._v(_vm._s(_vm.$t(\"i18n.addNodeAccess\")))]\n              )\n            : _vm._e(),\n          _vm.showEdit\n            ? _c(\n                \"el-button\",\n                {\n                  staticStyle: { float: \"right\", padding: \"3px 10px\" },\n                  attrs: { type: \"text\" },\n                  on: { click: _vm.openDialog }\n                },\n                [_vm._v(_vm._s(_vm.$t(\"i18n.deployNewNode\")))]\n              )\n            : _vm._e()\n        ],\n        1\n      ),\n      _c(\n        \"el-scrollbar\",\n        { staticStyle: { height: \"100%\" } },\n        [\n          _c(\n            \"el-table\",\n            {\n              staticStyle: { width: \"100%\" },\n              attrs: {\n                data: _vm.nodeList,\n                \"max-height\": _vm.height,\n                \"show-header\": false\n              }\n            },\n            [\n              _c(\"el-table-column\", {\n                attrs: { \"show-overflow-tooltip\": \"\" },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(scope) {\n                      return [\n                        _c(\"div\", { staticClass: \"node_icon\" }, [\n                          _c(\"span\", [_vm._v(\"Node\")])\n                        ]),\n                        _c(\"div\", { staticClass: \"node_icon_right\" }, [\n                          _c(\"div\", { staticClass: \"node_key\" }, [\n                            _vm._v(\n                              _vm._s(\n                                scope.row.name + \"(\" + scope.row.pub_key + \")\"\n                              )\n                            )\n                          ]),\n                          _c(\n                            \"div\",\n                            { staticStyle: { display: \"inline-block\" } },\n                            [\n                              _vm._v(\n                                _vm._s(\n                                  scope.row.external_ip +\n                                    \":\" +\n                                    scope.row.p2p_port\n                                )\n                              )\n                            ]\n                          ),\n                          scope.row.type == 1\n                            ? _c(\"div\", { staticClass: \"node_role\" }, [\n                                _vm._v(\"Validator\")\n                              ])\n                            : _vm._e()\n                        ])\n                      ]\n                    }\n                  }\n                ])\n              }),\n              _c(\"el-table-column\", {\n                attrs: { width: 250 },\n                scopedSlots: _vm._u([\n                  {\n                    key: \"default\",\n                    fn: function(scope) {\n                      return [\n                        _c(\n                          \"div\",\n                          {\n                            staticClass: \"node_status\",\n                            class: { \"node-item-error\": !scope.row.is_alive }\n                          },\n                          [\n                            _vm._v(\n                              _vm._s(scope.row.is_alive ? \"Normal\" : \"Error\")\n                            )\n                          ]\n                        )\n                      ]\n                    }\n                  }\n                ])\n              }),\n              _vm.showEdit\n                ? _c(\n                    \"el-table-column\",\n                    { attrs: { width: \"120\" } },\n                    [\n                      [\n                        _c(\n                          \"el-button\",\n                          {\n                            attrs: { type: \"danger\" },\n                            on: { click: _vm.confirm }\n                          },\n                          [_vm._v(_vm._s(_vm.$t(\"i18n.removeNode\")))]\n                        )\n                      ]\n                    ],\n                    2\n                  )\n                : _vm._e(),\n              _vm.showEdit\n                ? _c(\"el-table-column\", {\n                    attrs: { type: \"expand\" },\n                    scopedSlots: _vm._u(\n                      [\n                        {\n                          key: \"default\",\n                          fn: function(props) {\n                            return [\n                              _c(\n                                \"el-button\",\n                                {\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.start(props.row.pub_key)\n                                    }\n                                  }\n                                },\n                                [_vm._v(_vm._s(_vm.$t(\"i18n.startNode\")))]\n                              ),\n                              _c(\n                                \"el-button\",\n                                {\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.stop(props.row.pub_key)\n                                    }\n                                  }\n                                },\n                                [_vm._v(_vm._s(_vm.$t(\"i18n.stopNode\")))]\n                              ),\n                              _c(\n                                \"el-button\",\n                                {\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.restart(props.row.pub_key)\n                                    }\n                                  }\n                                },\n                                [_vm._v(_vm._s(_vm.$t(\"i18n.restartNode\")))]\n                              )\n                            ]\n                          }\n                        }\n                      ],\n                      null,\n                      false,\n                      3779459043\n                    )\n                  })\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: { title: \"Node\", visible: _vm.dialogFormVisible },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.dialogFormVisible = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              attrs: {\n                model: _vm.form,\n                \"label-width\": \"150px\",\n                \"label-position\": \"left\"\n              }\n            },\n            [\n              _c(\n                \"el-form-item\",\n                { attrs: { label: _vm.$t(\"i18n.nodeName\") + \":\" } },\n                [\n                  _c(\"el-input\", {\n                    model: {\n                      value: _vm.form.nodeName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form, \"nodeName\", $$v)\n                      },\n                      expression: \"form.nodeName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: _vm.$t(\"i18n.role\") } },\n                [\n                  _c(\n                    \"el-select\",\n                    {\n                      attrs: { placeholder: \"\" },\n                      model: {\n                        value: _vm.form.status,\n                        callback: function($$v) {\n                          _vm.$set(_vm.form, \"status\", $$v)\n                        },\n                        expression: \"form.status\"\n                      }\n                    },\n                    [\n                      _c(\"el-option\", {\n                        key: \"Normal\",\n                        attrs: { label: \"Normal\", value: \"Normal\" }\n                      }),\n                      _c(\"el-option\", {\n                        key: \"Validator\",\n                        attrs: { label: \"Validator\", value: \"Validator\" }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: _vm.$t(\"i18n.monitorAddr\") + \":\" } },\n                [\n                  _c(\"el-input\", {\n                    attrs: { placeholder: \"address:port\" },\n                    model: {\n                      value: _vm.form.monitorAddr,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form, \"monitorAddr\", $$v)\n                      },\n                      expression: \"form.monitorAddr\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"CreatorEnode:\" } },\n                [\n                  _c(\"el-input\", {\n                    attrs: {\n                      placeholder:\n                        \"enode://:pubkey@ip:port;  required if you want to join an exist blockchain\"\n                    },\n                    model: {\n                      value: _vm.form.creatorEnode,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form, \"creatorEnode\", $$v)\n                      },\n                      expression: \"form.creatorEnode\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"BootNodes:\" } },\n                [\n                  _c(\"el-input\", {\n                    attrs: {\n                      type: \"textarea\",\n                      rows: 8,\n                      placeholder:\n                        \"enode://:pubkey@ip:port split by ',';required if you want to join an exist blockchain\"\n                    },\n                    model: {\n                      value: _vm.form.bootNodes,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form, \"bootNodes\", $$v)\n                      },\n                      expression: \"form.bootNodes\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\"el-button\", { on: { click: _vm.cancel } }, [\n                _vm._v(_vm._s(_vm.$t(\"i18n.cancel\")))\n              ]),\n              _c(\n                \"el-button\",\n                { attrs: { type: \"primary\" }, on: { click: _vm.submitForm } },\n                [_vm._v(_vm._s(_vm.$t(\"i18n.confirm\")))]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: { title: \"Node\", visible: _vm.dialogForm2Visible },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.dialogForm2Visible = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              attrs: {\n                model: _vm.form2,\n                \"label-width\": \"150px\",\n                \"label-position\": \"left\"\n              }\n            },\n            [\n              _c(\n                \"el-form-item\",\n                { attrs: { label: _vm.$t(\"i18n.nodeName\") + \":\" } },\n                [\n                  _c(\"el-input\", {\n                    model: {\n                      value: _vm.form2.nodeName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form2, \"nodeName\", $$v)\n                      },\n                      expression: \"form2.nodeName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: _vm.$t(\"i18n.role\") } },\n                [\n                  _c(\n                    \"el-select\",\n                    {\n                      attrs: { placeholder: \"\" },\n                      model: {\n                        value: _vm.form2.status,\n                        callback: function($$v) {\n                          _vm.$set(_vm.form2, \"status\", $$v)\n                        },\n                        expression: \"form2.status\"\n                      }\n                    },\n                    [\n                      _c(\"el-option\", {\n                        key: \"Normal\",\n                        attrs: { label: \"Normal\", value: \"Normal\" }\n                      }),\n                      _c(\"el-option\", {\n                        key: \"Validator\",\n                        attrs: { label: \"Validator\", value: \"Validator\" }\n                      })\n                    ],\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"Node Pubkey:\" } },\n                [\n                  _c(\"el-input\", {\n                    model: {\n                      value: _vm.form2.nodePubKey,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form2, \"nodePubKey\", $$v)\n                      },\n                      expression: \"form2.nodePubKey\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"Node IP:\" } },\n                [\n                  _c(\"el-input\", {\n                    model: {\n                      value: _vm.form2.nodeip,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form2, \"nodeip\", $$v)\n                      },\n                      expression: \"form2.nodeip\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"Node P2P Port:\" } },\n                [\n                  _c(\"el-input\", {\n                    model: {\n                      value: _vm.form2.p2pPort,\n                      callback: function($$v) {\n                        _vm.$set(_vm.form2, \"p2pPort\", $$v)\n                      },\n                      expression: \"form2.p2pPort\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\"el-button\", { on: { click: _vm.cancel } }, [\n                _vm._v(_vm._s(_vm.$t(\"i18n.cancel\")))\n              ]),\n              _c(\n                \"el-button\",\n                { attrs: { type: \"primary\" }, on: { click: _vm.submitForm2 } },\n                [_vm._v(_vm._s(_vm.$t(\"i18n.confirm\")))]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}