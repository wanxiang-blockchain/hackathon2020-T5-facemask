{"remainingRequest":"/home/colin/Workspace/src/platone-frontend/node_modules/babel-loader/lib/index.js!/home/colin/Workspace/src/platone-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/colin/Workspace/src/platone-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/colin/Workspace/src/platone-frontend/src/components/page/Nodes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/colin/Workspace/src/platone-frontend/src/components/page/Nodes.vue","mtime":1601001321776},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/colin/Workspace/src/platone-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { dataUrl, apiServerUrl } from \"../../config\";\nexport default {\n  data: function data() {\n    return {\n      nodeList: [],\n      dialogFormVisible: false,\n      form: {\n        monitorAddr: '',\n        creatorEnode: '',\n        bootNodes: '',\n        nodeName: '',\n        status: 'Normal'\n      },\n      form2: {\n        nodeName: '',\n        status: 'Normal',\n        nodeip: '',\n        nodePubKey: '',\n        p2pPort: ''\n      }\n    };\n  },\n  methods: {\n    getData: function getData() {\n      var _this = this;\n\n      this.axios.get(dataUrl + '/nodes').then(function (res) {\n        if (res && res.data) {\n          _this.nodeList = res.data;\n        }\n      }).catch(function (res) {\n        console.log(res);\n      });\n    },\n    confirm: function confirm() {\n      var _this2 = this;\n\n      this.$confirm(this.$t('i18n.confirmRemove'), '', {\n        confirmButtonText: this.$t('i18n.confirm'),\n        cancelButtonText: this.$t('i18n.cancel'),\n        type: 'warning'\n      }).then(function () {\n        _this2.$message({\n          type: 'success',\n          message: _this2.$t('i18n.removeSuccess')\n        });\n      });\n    },\n    openDialog: function openDialog() {\n      this.resetForm();\n      this.dialogFormVisible = true;\n    },\n    openDialog2: function openDialog2() {\n      this.resetForm();\n      this.dialogForm2Visible = true;\n    },\n    resetForm: function resetForm() {\n      this.form = {\n        monitorAddr: \"\",\n        creatorEnode: \"\",\n        bootNodes: \"\",\n        nodeName: '',\n        status: 'Normal'\n      };\n      this.form2 = {\n        nodeName: '',\n        status: 'Normal',\n        nodeip: '',\n        nodePubKey: '',\n        p2pPort: ''\n      };\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n\n      var monitorInfo = this.form.monitorAddr.split(':');\n      var monitorIp = monitorInfo[0];\n      var monitorPort = monitorInfo.length > 1 ? monitorInfo[1] : \"50051\";\n      this.axios.get(apiServerUrl + '/superadmin/createnode', {\n        params: {\n          MonitorIp: monitorIp,\n          MonitorPort: monitorPort,\n          Groupid: 0,\n          NodeIp: monitorIp,\n          CreatorEnode: this.form.creatorEnode,\n          Bootnodes: this.form.bootNodes,\n          NodeName: this.form.nodeName,\n          Status: this.form.status == 'Normal' ? 0 : 1\n        }\n      }).then(function (res) {\n        if (res && res.data) {\n          console.log(res);\n\n          _this3.$message.success(\"Create Node Success\");\n\n          window.location.reload();\n        }\n      }).catch(function (res) {\n        _this3.$message.error(\"Create Node Failed\");\n      });\n    },\n    submitForm2: function submitForm2() {\n      var _this4 = this;\n\n      this.axios.get(apiServerUrl + '/superadmin/node/add', {\n        params: {\n          Name: this.form2.nodeName,\n          ExternalIP: this.form2.nodeip,\n          InternalIP: this.form2.nodeip,\n          PublicKey: this.form2.nodePubKey,\n          P2pPort: this.form2.p2pPort,\n          Status: this.form2.status == 'Normal' ? 0 : 1\n        }\n      }).then(function (res) {\n        if (res && res.data) {\n          console.log(res);\n\n          _this4.$message.success(\"Create Node Success\");\n\n          window.location.reload();\n        }\n      }).catch(function (res) {\n        _this4.$message.error(\"Create Node Failed\");\n      });\n    },\n    cancel: function cancel() {\n      this.resetForm();\n      this.dialogFormVisible = false;\n      this.dialogForm2Visible = false;\n    },\n    start: function start(pub_key) {\n      var _this5 = this;\n\n      this.axios.get(apiServerUrl + '/superadmin/startnode', {\n        params: {\n          PublicKey: pub_key,\n          Groupid: 0\n        }\n      }).then(function (res) {\n        if (res && res.data) {\n          console.log(res);\n\n          _this5.$message.success(\"Start Node Success\");\n        }\n      }).catch(function (res) {\n        _this5.$message.error('Start Node Failed');\n      });\n    },\n    stop: function stop(pub_key) {\n      var _this6 = this;\n\n      this.axios.get(apiServerUrl + '/superadmin/stopnode', {\n        params: {\n          PublicKey: pub_key,\n          Groupid: 0\n        }\n      }).then(function (res) {\n        if (res && res.data) {\n          console.log(res);\n\n          _this6.$message.success(\"Stop Node Success\");\n        }\n      }).catch(function (res) {\n        _this6.$message.error('Stop Node Failed');\n      });\n    },\n    restart: function restart(pub_key) {\n      var _this7 = this;\n\n      this.axios.get(apiServerUrl + '/superadmin/restartnode', {\n        params: {\n          PublicKey: pub_key,\n          Groupid: 0\n        }\n      }).then(function (res) {\n        if (res && res.data) {\n          console.log(res);\n\n          _this7.$message.success(\"Restart Node Success\");\n        }\n      }).catch(function (res) {\n        _this7.$message.error('Restart Node Failed');\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.getData();\n    setInterval(this.getData, 15000);\n  },\n  props: {\n    height: {\n      default: 270\n    },\n    showEdit: {\n      default: false\n    }\n  }\n};",{"version":3,"sources":["Nodes.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <div slot=\"header\" style=\"margin-bottom:10px\">\n        <span>{{$t('i18n.nodeList')}}</span>\n        <el-button style=\"float: right; padding: 3px 10px\" type=\"text\" v-if=\"showEdit\" @click=\"openDialog2\">{{$t('i18n.addNodeAccess')}}</el-button>\n        <el-button style=\"float: right; padding: 3px 10px\" type=\"text\" v-if=\"showEdit\" @click=\"openDialog\">{{$t('i18n.deployNewNode')}}</el-button>\n    </div>\n\n    <el-scrollbar style=\"height:100%;\">\n    <el-table :data=\"nodeList\" :max-height=\"height\" style=\"width:100%\" :show-header=\"false\">\n    <el-table-column  show-overflow-tooltip>\n        <template v-slot=\"scope\" >\n            <div class=\"node_icon\"><span>Node</span></div>\n            <div class=\"node_icon_right\">\n                <div class=\"node_key\">{{scope.row.name + '(' + scope.row.pub_key + ')'}}</div>\n                <div style=\"display:inline-block\">{{scope.row.external_ip + ':' + scope.row.p2p_port}}</div>\n                <div class = \"node_role\" v-if=\"scope.row.type == 1\">Validator</div>\n            </div>\n        </template>\n    </el-table-column>\n    <el-table-column :width=\"250\" >\n            <template v-slot=\"scope\" ><div class = \"node_status\"  :class=\"{'node-item-error': !scope.row.is_alive}\">{{scope.row.is_alive?\"Normal\":\"Error\"}}</div></template>\n    </el-table-column>    \n    <el-table-column width=\"120\"  v-if=\"showEdit\">\n        <template>\n            <el-button type=\"danger\" @click=\"confirm\">{{$t('i18n.removeNode')}}</el-button>\n        </template>\n    </el-table-column>\n    <el-table-column type=\"expand\" v-if=\"showEdit\">\n        <template slot-scope=\"props\">\n            <el-button @click=\"start(props.row.pub_key)\">{{$t('i18n.startNode')}}</el-button>\n            <el-button @click=\"stop(props.row.pub_key)\">{{$t('i18n.stopNode')}}</el-button>\n            <el-button @click=\"restart(props.row.pub_key)\">{{$t('i18n.restartNode')}}</el-button>\n        </template>\n    </el-table-column>\n    </el-table>\n    </el-scrollbar>\n\n    <el-dialog :title=\"'Node'\" :visible.sync=\"dialogFormVisible\">\n        <el-form :model=\"form\" label-width=\"150px\"  :label-position=\"'left'\">\n            <el-form-item :label=\"$t('i18n.nodeName') + ':'\">\n                <el-input v-model=\"form.nodeName\"></el-input>\n            </el-form-item>\n            <el-form-item :label=\"$t('i18n.role')\">\n                <el-select v-model=\"form.status\" placeholder=\"\">\n                    <el-option key=\"Normal\" :label=\"'Normal'\" value=\"Normal\"></el-option>\n                    <el-option key=\"Validator\" :label=\"'Validator'\" value=\"Validator\"></el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item :label=\"$t('i18n.monitorAddr') + ':'\">\n                <el-input v-model=\"form.monitorAddr\" :placeholder=\"'address:port'\"></el-input>\n            </el-form-item>\n\n            <el-form-item :label=\"'CreatorEnode:'\" >\n                <el-input v-model=\"form.creatorEnode\" :placeholder=\"'enode://:pubkey@ip:port;  required if you want to join an exist blockchain'\"></el-input>\n            </el-form-item>\n\n            <el-form-item :label=\"'BootNodes:'\">\n                <el-input type=\"textarea\" :rows=\"8\" v-model=\"form.bootNodes\" :placeholder=\"'enode://:pubkey@ip:port split by \\',\\';required if you want to join an exist blockchain'\"></el-input>\n            </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"cancel\">{{$t('i18n.cancel')}}</el-button>\n            <el-button type=\"primary\" @click=\"submitForm\">{{$t('i18n.confirm')}}</el-button>\n        </div>\n    </el-dialog>\n\n\n    <el-dialog :title=\"'Node'\" :visible.sync=\"dialogForm2Visible\">\n        <el-form :model=\"form2\" label-width=\"150px\"  :label-position=\"'left'\">\n            <el-form-item :label=\"$t('i18n.nodeName') + ':'\" >\n                <el-input v-model=\"form2.nodeName\"></el-input>\n            </el-form-item>\n            <el-form-item :label=\"$t('i18n.role')\">\n                <el-select v-model=\"form2.status\" placeholder=\"\">\n                    <el-option key=\"Normal\" :label=\"'Normal'\" value=\"Normal\"></el-option>\n                    <el-option key=\"Validator\" :label=\"'Validator'\" value=\"Validator\"></el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item :label=\"'Node Pubkey:'\" >\n                <el-input v-model=\"form2.nodePubKey\" ></el-input>\n            </el-form-item>\n            <el-form-item :label=\"'Node IP:'\" >\n                <el-input v-model=\"form2.nodeip\" ></el-input>\n            </el-form-item>\n            <el-form-item :label=\"'Node P2P Port:'\">\n                <el-input v-model=\"form2.p2pPort\" ></el-input>\n            </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"cancel\">{{$t('i18n.cancel')}}</el-button>\n            <el-button type=\"primary\" @click=\"submitForm2\">{{$t('i18n.confirm')}}</el-button>\n        </div>\n    </el-dialog>\n\n    \n</div>\n</template>\n\n<script>\nimport {dataUrl,apiServerUrl} from '../../config'\nexport default {\n    data() {\n        return {\n            nodeList: [],\n            dialogFormVisible : false,\n            form:{\n                monitorAddr:'',\n                creatorEnode:'',\n                bootNodes:'',\n                nodeName:'',\n                status:'Normal'\n            },\n\n            form2:{\n                nodeName:'',\n                status:'Normal',\n                nodeip:'',\n                nodePubKey:'',\n                p2pPort:''\n            }\n        }\n    },\n    methods:{\n        getData(){\n            this.axios.get(dataUrl + '/nodes').then(res => {\n                if (res && res.data) {\n                    this.nodeList = res.data;\n                }\n            }).catch(res => {\n                console.log(res)\n            })\n        },\n        confirm(){\n            this.$confirm(this.$t('i18n.confirmRemove'), '', {\n            confirmButtonText: this.$t('i18n.confirm'),\n            cancelButtonText: this.$t('i18n.cancel'),\n            type: 'warning'\n            }).then(() => {\n                this.$message({\n                    type: 'success',\n                    message: this.$t('i18n.removeSuccess')\n                });\n            })\n        },\n        openDialog(){\n            this.resetForm()\n            this.dialogFormVisible = true\n        },\n        openDialog2(){\n            this.resetForm()\n            this.dialogForm2Visible = true\n        },\n        resetForm(){\n            this.form = {\n                monitorAddr:\"\",\n                creatorEnode:\"\",\n                bootNodes:\"\",\n                nodeName:'',\n                status:'Normal'\n            };\n\n            this.form2 = {\n                nodeName:'',\n                status:'Normal',\n                nodeip:'',\n                nodePubKey:'',\n                p2pPort:''\n            }\n        },\n        submitForm(){\n            let monitorInfo = this.form.monitorAddr.split(':')\n            let monitorIp = monitorInfo[0]\n            let monitorPort = monitorInfo.length > 1?monitorInfo[1]:\"50051\"\n            this.axios.get(apiServerUrl + '/superadmin/createnode',{\n                        params: {\n                            MonitorIp:monitorIp,\n                            MonitorPort:monitorPort,\n                            Groupid:0,\n                            NodeIp:monitorIp,\n                            CreatorEnode:this.form.creatorEnode,\n                            Bootnodes:this.form.bootNodes,\n                            NodeName:this.form.nodeName,\n                            Status:this.form.status == 'Normal'?0:1\n                        }\n                    }).then(res => {\n                if (res && res.data) {\n                    console.log(res)\n                    this.$message.success(\"Create Node Success\");\n                    window.location.reload();\n                }\n            }).catch(res => {\n                this.$message.error(\"Create Node Failed\");\n            })\n        },\n        submitForm2(){\n            this.axios.get(apiServerUrl + '/superadmin/node/add',{\n                        params: {\n                            Name:this.form2.nodeName,\n                            ExternalIP:this.form2.nodeip,\n                            InternalIP:this.form2.nodeip,\n\t                        PublicKey:this.form2.nodePubKey,\n\t                        P2pPort:this.form2.p2pPort,\n                            Status:this.form2.status == 'Normal'?0:1\n                        }\n                    }).then(res => {\n                if (res && res.data) {\n                    console.log(res)\n                    this.$message.success(\"Create Node Success\");\n                    window.location.reload();\n                }\n            }).catch(res => {\n                this.$message.error(\"Create Node Failed\");\n            })\n        },\n        cancel(){\n            this.resetForm()\n            this.dialogFormVisible = false\n            this.dialogForm2Visible = false\n        },\n        start(pub_key){\n            this.axios.get(apiServerUrl + '/superadmin/startnode',{\n                        params: {\n                            PublicKey:pub_key,\n                            Groupid:0\n                        }\n                    }).then(res => {\n                if (res && res.data) {\n                    console.log(res)\n                    this.$message.success(\"Start Node Success\");\n                }\n            }).catch(res => {\n                this.$message.error('Start Node Failed');\n            })\n        },\n        stop(pub_key){\n            this.axios.get(apiServerUrl + '/superadmin/stopnode',{\n                        params: {\n                            PublicKey:pub_key,\n                            Groupid:0\n                        }\n                    }).then(res => {\n                if (res && res.data) {\n                    console.log(res)\n                    this.$message.success(\"Stop Node Success\");\n                }\n            }).catch(res => {\n                this.$message.error('Stop Node Failed');\n            })\n        },\n        restart(pub_key){\n            this.axios.get(apiServerUrl + '/superadmin/restartnode',{\n                        params: {\n                            PublicKey:pub_key,\n                            Groupid:0\n                        }\n                    }).then(res => {\n                if (res && res.data) {\n                    console.log(res)\n                    this.$message.success(\"Restart Node Success\");\n                }\n            }).catch(res => {\n                this.$message.error('Restart Node Failed');\n            })\n        }\n    },\n    mounted:function() {\n        this.getData()\n        setInterval(this.getData,15000)\n    },\n    props:{\n        height:{\n            default:270\n        },\n        showEdit :{\n            default:false\n        }\n    }\n}\n</script>\n\n<style scoped>\n\n.node_icon{\n    width:40px;\n    height:40px;\n    background-color:#f0f0f0;\n    text-align: center;\n    line-height: 40px;\n    font-weight:bold;\n    border-radius: 5px;\n    float:left\n}\n\n.node_icon_right{\n    display:inline-block;\n    height:40px;\n    margin-left:5px;\n}\n\n.node_status{\n    width:60px;\n    height: 20px;\n    background-color: dodgerblue;\n    color:white;\n    text-align: center;\n    border-radius: 3px;\n    margin-left: 50px;\n}\n.node-item-error{\n    background-color: crimson;\n}\n.node_key{\n    display: block;\n    overflow:hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    max-width: 270px;\n}\n\n.node_role{\n    width:70px;\n    height: 20px;\n    background-color: rgba(119,131,143,.1);\n    color:#e6a23c;\n    text-align: center;\n    border-radius: 3px;\n    margin-left: 20px;\n    font-weight: bold;\n    border-top-right-radius: .25rem;\n    border-bottom-right-radius : .25rem;\n    border-top-left-radius: 0;\n    border-bottom-left-radius :0;\n    transition: .2s ease-in-out;\n    display: inline-block;\n}\n\n</style>"],"sourceRoot":"src/components/page"}]}